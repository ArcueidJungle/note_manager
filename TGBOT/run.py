import asyncio

import requests

from config import TOKEN, OWM_API_KEY
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ .env)
load_dotenv()

bot = Bot(token=TOKEN)
dp = Dispatcher()  # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä

weather_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–æ—Å–∫–≤–∞"), KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [KeyboardButton(text="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"), KeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")]
    ],
    resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
)



def get_weather(city: str) -> str:
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL-–∑–∞–ø—Ä–æ—Å
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = requests.get(url)
    data = response.json()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if response.status_code != 200:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {data['message']}"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    temp = data["main"]["temp"]
    description = data["weather"][0]["description"]
    humidity = data["main"]["humidity"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}\n"
        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üå§ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                         reply_markup = weather_kb
                        )

CITIES = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]

@dp.message(lambda message: message.text in CITIES)
async def handle_city_button(message: types.Message):
    city = message.text
    try:
        weather_info = get_weather(city)
    except Exception as e:
        weather_info = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    await message.answer(weather_info, reply_markup=weather_kb)


@dp.message(lambda message: message.text == "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
async def handle_other_city(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

@dp.message(lambda message: message.text not in CITIES + ["–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"])
async def handle_custom_city(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
        return

    city = " ".join(parts[1:])
    try:
        weather_info = get_weather(city)
    except Exception as e:
        weather_info = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    await message.answer(weather_info)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())